#+TITLE: My Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Straight
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+end_src

* Emacs
This section is for miscelaneous settings which do not belong elsewhere, everything should be commented.
#+begin_src emacs-lisp
  ;; set specific location for custom settings
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

* Backup
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
#+end_src
* General
This section sets up [[https://github.com/noctuid/general.el][general.el]]. This section should not be used to set keybindings (except for the most general ones).
Keybindings should go with their respective packages.
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config
    (general-auto-unbind-keys)
    (general-evil-setup)

    (general-create-definer leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    )
#+end_src

* Dired
#+begin_src emacs-lisp
  (use-package dired
    :config
    (setq dired-listing-switches "-agho --group-directories-first")
    :general
    (general-def
      :states 'normal
      :keymaps 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file)
    )


  (use-package all-the-icons-dired
    :straight t
    :hook (dired-mode . all-the-icons-dired-mode))


  (use-package dired-x
    :init
    (leader-key-def
      "<SPC>" 'dired-jump
      "m" '(lambda () (interactive) (find-file "~/.local/share/chezmoi/dot_emacs.d/emacs.org"))
      ))

  (global-auto-revert-mode)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

* Minibuffer
Configuration for the minibuffer. Currently using [[https://github.com/minad/vertico][vertico]].
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :straight t
    :init
    (vertico-mode)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Use the `orderless' completion style.
  ;; Enable `partial-completion' for file path expansion.
  ;; You may prefer to use `initials' instead of `partial-completion'.
  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package consult
    :straight t
    :general
    (leader-key-def
      "/" 'consult-line
      "b" 'consult-buffer
      "r" 'consult-recent-file
      "i" 'consult-imenu
      ))

  (use-package marginalia
    :straight t
    :after vertico
    :init
    (marginalia-mode)
    (setq marginalia-annotators '(marginalia-annotators-heavy))
    )
#+end_src

* Eshell
Configuration and setup for eshell
#+begin_src emacs-lisp
  (leader-key-def
    "t" 'eshell-other-window)

  (defun eshell-other-window ()
    "Open a `eshell' in a new window."
    (interactive)
    (let ((buf (eshell)))
      (switch-to-buffer (other-buffer buf))
      (switch-to-buffer-other-window buf)))
#+end_src
* Org Mode
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-confirm-babel-evaluate nil)
    (setq org-src-window-setup 'current-window)
    (setq org-ellipsis " â–¾")
    (setq org-M-RET-may-split-line nil)
    (setq org-latex-pdf-process '("texi2dvi -p -b -V %f"))

    (require 'org-tempo)
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       ))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

    (use-package org-superstar
      :straight t
      :hook (org-mode . (lambda () (org-superstar-mode 1))))

    :hook (org-mode . org-indent-mode)
    )
#+end_src
* EVIL
setup evil and related packages
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (global-visual-line-mode 1)
    :custom
    (evil-undo-system 'undo-fu)
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-respect-visual-line-mode t)

    :config
    (evil-mode 1)
    (general-def
      "C-M-u" 'universal-argument ;; doesn't work with :general for some reason
      )

    (use-package undo-fu :straight t)
    (use-package evil-collection
      :straight t
      :after evil
      :config
      (evil-collection-init))
    (use-package evil-goggles
      :straight t
      :config
      (evil-goggles-mode 1))

    (use-package evil-commentary
      :straight t
      :config
      (evil-commentary-mode 1))
    (use-package evil-snipe
      :straight t
      :general
      (:states '(normal motion)
               "s" 'evil-snipe-s
               "S" 'evil-snipe-S)
      )

    (use-package evil-multiedit
      :straight t
      :config
      (evil-multiedit-default-keybinds)
      )
    (use-package evil-surround
      :straight t
      :config
      (global-evil-surround-mode 1))
    )
#+end_src

* Help
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))

  (use-package helpful
    :straight t
    :general
    ("C-h f" 'helpful-callable
     "C-h v" 'helpful-variable
     "C-h k" 'helpful-key
     "C-c C-h" 'helpful-at-point
     )
    )

  (use-package define-word
    :straight t
    :general
    (
     "C-h C-w" 'define-word-at-point
     ))
#+end_src

* Editing
This section contains packages and settings for
non-evil specific editing
#+begin_src emacs-lisp
  ;; Delimiters
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))

  (show-paren-mode 1)
  (electric-pair-mode 1)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+end_src
* Navigation
This section contains packages/configuration for
non-evil-specific navigation
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :general
    ("C-s" 'avy-goto-char-timer)
    )

  (use-package winum
    :straight t
    :general
    (
     "M-1" 'winum-select-window-1
     "M-2" 'winum-select-window-2
     "M-3" 'winum-select-window-3
     "M-4" 'winum-select-window-4
     "M-5" 'winum-select-window-5
     "M-6" 'winum-select-window-6
     "M-7" 'winum-select-window-7
     "M-8" 'winum-select-window-8
     )
    :config
    (winum-mode t))

  (use-package smartscan
    :straight t
    :hook (prog-mode . smartscan-mode))

  (use-package rg
    :straight t
    :config
    (rg-enable-default-bindings))
#+end_src

* Formatting
Automatic formatting
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :straight t
    :hook (prog-mode . aggressive-indent-mode)
    )

  (use-package format-all
    :straight t
    :hook
    (prog-mode . format-all-mode)
    )
#+end_src

* Git
Setup git integration
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :general
    (leader-key-def
      "g" 'magit-status
      ))
#+end_src

* Project Management
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :custom
    (projectile-switch-project-action #'projectile-dired)
    :config (projectile-mode)
    :general
    (leader-key-def
      "p" 'projectile-command-map
      ))
#+end_src

* Major Modes
Set up major modes for languages, etc
#+begin_src emacs-lisp
  (use-package toml-mode :straight t)
  (use-package yaml-mode
    :straight t
    :mode "\\.yml\\'")
  (use-package rustic :straight t)
  (use-package nix-mode :straight t)
  (use-package json-mode :straight t)


  (use-package kbd-mode
    :straight (kbd-mode :type git :host github :repo "kmonad/kbd-mode"))
#+end_src
* Checkers
Set up checkers, i.e. syntax checking, spell checkers, etc
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :init (global-flycheck-mode)
    )
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :init
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.0) ;; default is 0.2
    :config
    (global-company-mode)
    )
#+end_src

* LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :init
    (setq gc-cons-threshold 100000000) ;; set per the lsp-doctor recommendation
    (setq read-process-output-max (* 1024 1024)) ;; same reason ^
    (setq lsp-keymap-prefix "C-c l")
    :hook (
           (rustic-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode)
  (use-package lsp-treemacs
    :straight t
    :commands lsp-treemacs-errors-list)
#+end_src

* GUI
Set gui settings, theme, fonts, etc
#+begin_src emacs-lisp
  ;; disabling useless ui elements
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)

  (global-hl-line-mode)

  ;; theme
  (use-package doom-themes
    :straight t
    :config (load-theme 'doom-one t))

  ;; font
  (set-face-attribute 'default nil :font "Source Code Pro" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Source Code Pro" :height 120)

  ;; line numbers
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook
                  rust-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; modeline
  (use-package smart-mode-line
    :straight t
    :config
    (sml/setup))
#+end_src
* local variables
;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:

