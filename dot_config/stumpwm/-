;;; -*-  mode: lisp; -*-

(in-package :stumpwm)

(set-prefix-key (kbd "s-t"))

(defcommand alacritty () ()
  (run-or-raise  "alacritty -e sh -c 'tmux attach || tmux'" '(:class "Alacritty")))

(define-key *top-map* (kbd "s-RET") "alacritty")

(define-key *top-map* (kbd "XF86Favorites") "exec bemenu-run")

;; Programs
(define-key *top-map* (kbd "s-c") "exec nyxt")
(define-key *top-map* (kbd "s-x") "exec emacsclient -c")

;; groups
(define-key *top-map* (kbd "s-g") "grouplist")
(define-key *top-map* (kbd "s-G") "gnew")
(define-key *top-map* (kbd "s-f") "gmove")

;; Lock screen
(define-key *top-map* (kbd "s-DEL") "exec slock")

;; window management
(define-key *top-map* (kbd "s-q") "delete-window")
(define-key *top-map* (kbd "s-Q") "remove-split")

(define-key *top-map* (kbd "s-r") "iresize")
(define-key *top-map* (kbd "s-R") "iresize")

(define-key *top-map* (kbd "s-n") "pull-hidden-next")
(define-key *top-map* (kbd "s-l") "windowlist")
(define-key *top-map* (kbd "s-w") "fnext")

(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Right") "move-focus right")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-Up") "move-focus up")

(define-key *top-map* (kbd "s-S-Left") "move-window left")
(define-key *top-map* (kbd "s-S-Right") "move-window right")
(define-key *top-map* (kbd "s-S-Down") "move-window down")
(define-key *top-map* (kbd "s-S-Up") "move-window up")

(define-key *top-map* (kbd "s-C-x") "quit-confirm")
(define-key *top-map* (kbd "s-S-x") "restart-hard")

;; window selection

(defcommand pull-hidden-or-select (n) ((:window-number "Num: "))
  "Pulls a window to the current frame if hidden, otherwise switches to the frame displaying it"
  (let ((win (find n (group-windows (current-group)) :key 'window-number :test '=)))
    (if (window-visible-p win)
	;; 	(message "visible")
	;; (message "invisible")
	(select-window-by-number n)
      (pull-window-by-number n)
      )))

(define-key *top-map* (kbd "s-0") "pull-hidden-or-select 0")
(define-key *top-map* (kbd "s-1") "pull-hidden-or-select 1")
(define-key *top-map* (kbd "s-2") "pull-hidden-or-select 2")
(define-key *top-map* (kbd "s-3") "pull-hidden-or-select 3")
(define-key *top-map* (kbd "s-4") "pull-hidden-or-select 4")
(define-key *top-map* (kbd "s-5") "pull-hidden-or-select 5")
(define-key *top-map* (kbd "s-6") "pull-hidden-or-select 6")
(define-key *top-map* (kbd "s-7") "pull-hidden-or-select 7")
(define-key *top-map* (kbd "s-8") "pull-hidden-or-select 8")
(define-key *top-map* (kbd "s-9") "pull-hidden-or-select 9")

(define-key *top-map* (kbd "s-)") "pull-window-by-number 0")
(define-key *top-map* (kbd "s-!") "pull-window-by-number 1")
(define-key *top-map* (kbd "s-@") "pull-window-by-number 2")
(define-key *top-map* (kbd "s-#") "pull-window-by-number 3")
(define-key *top-map* (kbd "s-$") "pull-window-by-number 4")
(define-key *top-map* (kbd "s-%") "pull-window-by-number 5")
(define-key *top-map* (kbd "s-^") "pull-window-by-number 6")
(define-key *top-map* (kbd "s-&") "pull-window-by-number 7")
(define-key *top-map* (kbd "s-*") "pull-window-by-number 8")
(define-key *top-map* (kbd "s-(") "pull-window-by-number 9")


;; display battery
(defcommand battery () ()
  (message 
   (run-shell-command "acpi -b -a -t" t)))

(define-key *root-map* (kbd "b") "battery")

;; display weather
(defcommand weather () ()
  (message 
   (run-shell-command "weather -q sck" t)))

(define-key *root-map* (kbd "W") "weather")


;; apply chezmoi
(defcommand chezmoi () ()
  (run-shell-command "chezmoi apply" t)
  (message "chezmoi applied"))

(define-key *root-map* (kbd "W") "chezmoi")


;; splits
(define-key *top-map* (kbd "s-v") "vsplit")
(define-key *top-map* (kbd "s-s") "hsplit")

;; Message window font
(set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

;; Volume
(let ((vup "exec pactl set-sink-volume @DEFAULT_SINK@ +5%")
      (vdown "exec pactl set-sink-volume @DEFAULT_SINK@ -5%")
      (vmute "exec pactl set-sink-mute @DEFAULT_SINK@ toggle")
      (vmicmute "exec pactl set-source-mute @DEFAULT_SOURCE@ toggle")
      (m *top-map*))
  (define-key m (kbd "XF86AudioLowerVolume") vdown)
  (define-key m (kbd "XF86AudioMute") vmute)
  (define-key m (kbd "XF86AudioMicMute") vmicmute)
  (define-key m (kbd "XF86AudioRaiseVolume") vup))

;; Brightness
(let ((bup "exec light -A 10")
      (bdown "exec light -U 10")
      (m *top-map*))
  (define-key m (kbd "XF86MonBrightnessDown") bdown)
  (define-key m (kbd "XF86MonBrightnessUp") bup))

;;; Define window placement policy...

;; Clear rules
(clear-window-placement-rules)

(setf *mouse-focus-policy* :click)

;; Modeline
(setf *window-format* "%m%n%s%c")
(setf *screen-mode-line-format* "[^B%n^b] %W^> %d")
(setf *time-modeline-string* "%a %F %k:%M")
(setf *mode-line-timeout* 2)

(defun enable-mode-line-everywhere ()
  (loop for screen in *screen-list* do
	(loop for head in (screen-heads screen) do
	      (enable-mode-line screen head t))))
(enable-mode-line-everywhere)

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; match is performed.
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
(define-frame-preference "Default"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
  (1 t nil :class "XTerm"))

