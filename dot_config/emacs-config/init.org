#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs-config/init.el

* Straight Bootstrap
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
* Custom Setup
#+begin_src emacs-lisp
(setq custom-file "~/.config/emacs-config/custom.el")
(load custom-file)
#+end_src
* Aesthetics
** UI Setup
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
(global-hl-line-mode)
(setq inhibit-splash-screen t)
(setq frame-resize-pixelwise t)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))

  (use-package rainbow-mode)
#+end_src
** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Source Code Pro" :height 150)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Source Code Pro" :height 150)
#+end_src
** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-mode))

  (defun enable-doom-modeline-icons (_frame)
    (setq doom-modeline-icon t))

  (add-hook 'after-make-frame-functions
            #'enable-doom-modeline-icons)

  (setq all-the-icons-scale-factor 1.1)
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-center-content t)
    (setq dashboard-set-footer nil)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    :config
    (dashboard-setup-startup-hook)
    )

    (recentf-mode t)
    (setq recentf-max-saved-items 100)
#+end_src
** Delimiter setup
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (show-paren-mode 1)
  (electric-pair-mode 1)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)

#+end_src

** Line Number Setup
#+begin_src emacs-lisp
  (use-package add-hooks)

  (add-hooks '(((prog-mode-hook text-mode-hook conf-mode-hook rust-mode-hook) . display-line-numbers-mode)))

#+end_src
* General Setup
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-auto-unbind-keys)
    (general-evil-setup)

    (general-create-definer leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    )
#+end_src
* Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-agho --group-directories-first")

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :config
    (setq dired-open-extensions '(("png" . "sxiv")
                                  ("mkv" . "mpv"))))

  (general-def
    :states 'normal
    :keymaps 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file)

  (leader-key-def
    "<SPC>" 'dired-jump
    "m" '(lambda () (interactive) (find-file "~/.local/share/chezmoi/dot_config/emacs-config/init.org"))
    )
#+end_src
* Mini Buffer
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)

    (setq vertico-cycle t)
    )

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Grow and shrink minibuffer
    ;;(setq resize-mini-windows t)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package consult)

  (leader-key-def
    "b" 'consult-buffer
    "r" 'consult-recent-file
    "i" 'consult-imenu
    )

  (use-package marginalia
    :init
    (marginalia-mode)
    (setq marginalia-annotators '(marginalia-annotators-heavy))
    )

  (use-package embark
    :ensure t

    :bind
    (("C-S-a" . embark-act)       ;; pick some comfortable binding
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src
* Misc
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq focus-follows-mouse t)
  
  (setq delete-by-moving-to-trash t)
  (defun system-move-file-to-trash (filename)
    (shell-command (concat (executable-find "rip") " " filename)))
#+end_src
* Terminals
#+begin_src emacs-lisp
  (leader-key-def
    "t" 'eshell-other-window)
  
  (defun eshell-other-window ()
    "Open a `eshell' in a new window."
    (interactive)
    (let ((buf (eshell)))
      (switch-to-buffer (other-buffer buf))
      (switch-to-buffer-other-window buf)))
#+end_src
* Org Mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-ellipsis " â–¾")

  (setq org-M-RET-may-split-line nil)
  (use-package org-superstar
    :hook (org-mode . (lambda () (org-superstar-mode 1))))

  ;; (use-package poly-org)
  ;; (add-to-list 'auto-mode-alist '("\\.org" . poly-org-mode))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (R . t)
     (shell . t)))

  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'current-window)

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("r" . "src R"))

  (use-package ox-pandoc)
  (setq org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex")))
  ;; (setq org-pandoc-options-for-latex-pdf '((fontfamily . "iwona")))


  (use-package org-ql)

  (setq org-latex-pdf-process '("texi2dvi -p -b -V %f"))
  (use-package org-ref)
  (setq org-ref-default-bibliography '("~/school/pacs/local.bib"))


  (leader-key-def
    "a" 'org-agenda
    "c" 'org-capture
    "ep" 'org-pandoc-export-to-latex-pdf
    "eh" 'org-pandoc-export-to-html5
    )
#+end_src
* EVIL
#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-tree)
    (setq evil-want-integration t)
    :config
    (evil-mode 1)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode 1))

  (use-package evil-goggles
    :config
    (evil-goggles-mode 1))

  (use-package evil-snipe)
  (use-package undo-tree
    :config
    (global-undo-tree-mode 1)
    )
#+end_src
* Help
#+begin_src emacs-lisp
  (use-package free-keys)
  (use-package which-key
    :config
    (which-key-mode 1))

  (use-package helpful)
  (leader-key-def
    "h" 'helpful-at-point
    )

  (use-package define-word)

  (leader-key-def
    "d" 'define-word-at-point
    "D" 'define-word
    )

#+end_src
* Navigation
#+begin_src emacs-lisp
  (use-package avy
    :config
    (general-def
      "C-s" 'avy-goto-char-timer
      ))

  (general-nmap
    "/" 'consult-line)

  (general-def
    "C-w m" 'maximize-window)
  (use-package winum
    :config
    (general-def
      "M-1" 'winum-select-window-1
      "M-2" 'winum-select-window-2
      "M-3" 'winum-select-window-3
      "M-4" 'winum-select-window-4
      "M-5" 'winum-select-window-5
      "M-6" 'winum-select-window-6
      "M-7" 'winum-select-window-7
      "M-8" 'winum-select-window-8
      )
    (winum-mode t))

  (use-package yafolding)
#+end_src
* Development
** Formatting
#+begin_src emacs-lisp
  ;; (use-package aggressive-indent
  ;;   :config
  ;;   (add-hook 'prog-mode-hook #'aggressive-indent-mode))
  (use-package format-all
    :config
    (format-all-mode 1))
#+end_src
** Version Control
#+begin_src emacs-lisp
  (use-package magit)
  (leader-key-def
    "g" 'magit-status
    )
#+end_src
** Projects
#+begin_src emacs-lisp
  (use-package projectile
    :config (projectile-mode)
    :init
    (setq projectile-switch-project-action #'projectile-dired))

  (leader-key-def
    "p" 'projectile-command-map
    )

#+end_src
** Languages
#+begin_src emacs-lisp
  (use-package toml-mode)
  (use-package fish-mode)
  (use-package yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (use-package rustic)
  (use-package nix-mode)
  
  (use-package ess)
  (use-package json-mode)
  
  ;; (add-to-list 'load-path "~/.config/emacs-config/kbd-mode/lisp/")
  ;; (require 'kbd-mode)
  
  (straight-use-package
   '(kbd-mode :type git :host github :repo "kmonad/kbd-mode"))
#+end_src
** Syntax Checking
#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode)
  )
#+end_src
** LSP
#+begin_src emacs-lisp
  (defun lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (setq lsp-keymap-prefix "C-c l")
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-rust-analyzer-cargo-watch-command "clippy")
    :hook (lsp-mode . 'lsp-mode-setup)
    (lsp-mode . lsp-enable-which-key-integration)
    ((c++-mode c-mode) . 'lsp-deferred)
    )

  (use-package lsp-ui)

  (use-package lsp-treemacs
    :after lsp
    :commands lsp-treemacs-error-list
    )

  ;; C, cpp, etc lsp stuff
  (use-package ccls
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
           (lambda () (require 'ccls) (lsp))))
  (setq ccls-executable "/usr/bin/ccls")
  (setq lsp-prefer-flymake nil)


  ;; Java
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
#+end_src
** Completion
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
    (global-company-mode 1))
  
  (use-package yasnippet)
  (use-package yasnippet-snippets)
#+end_src

* local variables
;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
