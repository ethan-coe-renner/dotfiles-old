;;; -*-  mode: lisp; -*-

(in-package :stumpwm)

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

(define-key *top-map* (kbd "s-RET") "exec alacritty -e sh -c 'tmux attach || tmux'")

(define-key *top-map* (kbd "XF86Favorites") "exec bemenu-run")

;; Programs
(define-key *top-map* (kbd "s-c") "exec qutebrowser")
(define-key *top-map* (kbd "s-x") "exec emacsclient -c")

;; groups
(define-key *top-map* (kbd "s-g") "grouplist")
(define-key *top-map* (kbd "s-G") "gnew")
(define-key *top-map* (kbd "s-f") "gmove")

;; Lock screen
(define-key *top-map* (kbd "s-DEL") "exec slock")

;; window management
(define-key *top-map* (kbd "s-q") "delete-window")
(define-key *top-map* (kbd "s-Q") "remove-split")

(define-key *top-map* (kbd "s-r") "iresize")
(define-key *top-map* (kbd "s-R") "iresize")

(define-key *top-map* (kbd "s-n") "pull-hidden-next")
(define-key *top-map* (kbd "s-l") "windowlist")
(define-key *top-map* (kbd "s-w") "fnext")

(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Right") "move-focus right")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-Up") "move-focus up")

(define-key *top-map* (kbd "s-S-Left") "move-window left")
(define-key *top-map* (kbd "s-S-Right") "move-window right")
(define-key *top-map* (kbd "s-S-Down") "move-window down")
(define-key *top-map* (kbd "s-S-Up") "move-window up")

(define-key *top-map* (kbd "s-v") "vsplit")
(define-key *top-map* (kbd "s-s") "hsplit")

;; Message window font
(set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

;; Volume
(let ((vup "exec pactl set-sink-volume @DEFAULT_SINK@ +5%")
      (vdown "exec pactl set-sink-volume @DEFAULT_SINK@ -5%")
      (vmute "exec pactl set-sink-mute @DEFAULT_SINK@ toggle")
      (vmicmute "exec pactl set-source-mute @DEFAULT_SOURCE@ toggle")
      (m *top-map*))
  (define-key m (kbd "XF86AudioLowerVolume") vdown)
  (define-key m (kbd "XF86AudioMute") vmute)
  (define-key m (kbd "XF86AudioMicMute") vmicmute)
  (define-key m (kbd "XF86AudioRaiseVolume") vup))

;; Brightness
(let ((bup "exec light -A 10")
      (bdown "exec light -U 10")
      (m *top-map*))
  (define-key m (kbd "XF86MonBrightnessDown") bdown)
  (define-key m (kbd "XF86MonBrightnessUp") bup))

;;; Define window placement policy...

;; Clear rules
(clear-window-placement-rules)

(setf *mouse-focus-policy* :click)

;; Modeline
(setf *window-format* "%m%n%s%c")
(setf *screen-mode-line-format* "[^B%n^b] %W^> %d")
(setf *time-modeline-string* "%a %b %e %k:%M")
(setf *mode-line-timeout* 2)
(defun enable-mode-line-everywhere ()
  (loop for screen in *screen-list* do
    (loop for head in (screen-heads screen) do
	    (enable-mode-line screen head t))))
(enable-mode-line-everywhere)

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; match is performed.
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
(define-frame-preference "Default"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
  (1 t nil :class "XTerm"))

